import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.junit.platform.gradle.plugin'

repositories {
	mavenCentral()
}

configurations.all {
	resolutionStrategy {
		// fail eagerly on version conflict
		failOnVersionConflict()
		
		// cache dynamic versions for 10 minutes
		cacheDynamicVersionsFor 10*60, 'seconds'
		
		// don't cache changing modules at all
		cacheChangingModulesFor 0, 'seconds'
	}
}

sourceSets {
	main.java.srcDirs = ['src']
	main.resources.srcDirs = ['src']
	main.resources.excludes = [ '**/*.java', '**/Thumbs.db' ]
	test.java.srcDirs = ['test']
	test.resources.srcDirs = ['test']
	test.resources.excludes = [ '**/*.java' ]
}

Properties props = new Properties()
props.load(project.rootProject.file('src/org/kse/version.properties').newDataInputStream())
version = props."KSE.Version"

ext {
	appName = props."KSE.Name"
	appVersion = props."KSE.Version"
	appSimpleName = props."KSE.SimpleName"
	appSimpleVersion = props."KSE.SimpleVersion"
	appUserModelId = props."KSE.AppUserModelId"
	distFileNamePrefix = "$appSimpleName-$appSimpleVersion"
	appJarName = "${appSimpleName}.jar"
	appExe = "${appSimpleName}.exe"

	// Icons
	iconsDir = "res/icons"
	kseIco = "$iconsDir/kse.ico"
	ksePng = "$iconsDir/kse.png"
	kseIcns = "$iconsDir/kse.icns"
	keystoreIcns = "$iconsDir/keystore.icns"

	// Vendor details
	copyright = "Copyright 2004 - 2013 Wayne Grant, 2013 - 2017 Kai Kramer"
	vendor = "Wayne Grant, Kai Kramer"
	website = "keystore-explorer.org"
	
	// Java Help properties
	helpCfg = "$projectDir/help/help.cfg"
	helpDir = sourceSets.main.resources.srcDirs.first().getAbsolutePath() + "/org/kse/gui/help"
	helpSearchIndexDir = "$buildDir/org/kse/gui/help/searchindex" 
	helpSearchIndexDirDist = "org/kse/gui/help/searchindex" 

	// Main class (for manifest entry)
	mainClass = "org.kse.KSE"
	
	distDir = "dist"
}

// TODO should be 1.7 for app and 1.8 for unit tests
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.58'
	compile group: 'net.java.dev.jna', name: 'jna', version: '4.1.0'
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile group: 'javax.help', name: 'javahelp', version: '2.0.05'
	compile group: 'com.miglayout', name: 'miglayout-swing', version: '4.2' // TODO try 5.0
	compile group: 'com.jgoodies', name: 'jgoodies-common', version: '1.8.1'
	compile group: 'com.jgoodies', name: 'jgoodies-looks', version: '2.7.0'

	// jars that are not available in a public repository
	compile fileTree(dir: 'lib', include: '*.jar')
	
	testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
	testCompile("org.junit.jupiter:junit-jupiter-params:5.0.2")
	testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
	
	// for eclipse
	testRuntime('org.junit.platform:junit-platform-launcher:1.0.2')
	
	// To avoid compiler warnings about @API annotations in JUnit code:
	testCompileOnly('org.apiguardian:apiguardian-api:1.0.0')
}

task javaHelpIndex(type: JavaExec, dependsOn: compileJava) {
	// TODO remove old searchindex?   
	main = 'com.sun.java.help.search.Indexer'
	classpath = sourceSets.main.runtimeClasspath
	ignoreExitValue = false
	workingDir = helpDir
	args '-c', helpCfg, '-db', helpSearchIndexDir
}

jar {
	dependsOn javaHelpIndex
	version = null
	into(helpSearchIndexDirDist) {
		from helpSearchIndexDir
	} 
	manifest {
		attributes('Built-JDK': System.getProperty('java.version'),
					'Implementation-Title': project.appName,
					'Implementation-Version': project.version,
					'Implementation-Vendor': project.vendor,
					'Specification-Title': project.appName,
					'Specification-Version': project.version,
					'Specification-Vendor': project.vendor,
					'Main-Class': project.mainClass,
					'Class-Path': configurations.compile.collect { 'lib/' + it.getName() }.join(' '),
					'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss"),
					'SplashScreen-Image': 'org/kse/gui/images/splash.png',
					'Sealed': 'true'
					)
	}
}

task launch4j(dependsOn: jar) {
	onlyIf {
		Os.isFamily(Os.FAMILY_WINDOWS)
	}

	doLast {
		ant.taskdef(name: 'launch4j', classname: 'net.sf.launch4j.ant.Launch4jTask') {
			classpath {
				fileset(dir: 'launch4j', includes: 'launch4j.jar,lib/xstream.jar' )
			}
		}
		ant.launch4j() {
			config(headerType: "gui", jarpath: appJarName, outfile: "$distDir/$appExe", 
				dontWrapJar: "true", errTitle: appName, stayAlive: "false", icon: kseIco ) {
				jre(minVersion: "1.7.0", path: "jre") {
					opt = "-Dkse.exe=true"
				}
				versionInfo(fileVersion: "$appVersion.0", fileDescription: appName, copyright: copyright,
					internalName: appSimpleName,  originalFilename: appExe, 
					productName: appName, productVersion: "$appVersion.0", txtFileVersion: appVersion, 
					txtProductVersion: appVersion )
			}
		}
	}
}

task nsis(dependsOn: launch4j) {
	doLast {
		def nsisScript = "kse.nsi"
		
		copy {
			from configurations.runtime
			into "$distDir/lib"
		}
		copy {
			from jar.archivePath
			into distDir
		}
		copy {
			from("nsis/${nsisScript}.template")
			rename("${nsisScript}.template", nsisScript)
			filter(ReplaceTokens, beginToken: '%', endToken: '%', tokens: [
				KSE_VERSION: appVersion, 
				KSE_SIMPLE_VERSION: appSimpleVersion, 
				KSE_APP_USER_MODEL_ID: appUserModelId
			])
			into("nsis")
		}

		exec {
			workingDir "$projectDir/nsis"
			commandLine "makensis", "/V2", nsisScript
		}
	}
}

task dist(type: Zip, dependsOn: launch4j) {
	
	into(distFileNamePrefix) { 
		from jar.archivePath
		from('res') {
			include 'kse.sh'
			fileMode 755
		} 
		from(distDir) {
			include appExe
		} 
		from('res/readmes') {
			include 'readme.txt'
		} 
	}
	into("$distFileNamePrefix/lib") {
		from configurations.runtime
	}
	into("$distFileNamePrefix/licenses") { 
		from('res/licenses') {
			include '**/*.txt'
			if (!file("lib/darcula.jar").exists()) {
				exclude 'license-darcula.txt' 
			} 
		} 
	}
	into("$distFileNamePrefix/icons") { 
		from('res/icons') {
			include '**/kse_*.png'
		} 
	}
	doLast {
		copy {
			from outputs.files
			into distDir
		}
	}
}

compileTestJava {
	// unit tests make use of Java 8 features
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	options.compilerArgs += '-parameters'
}